# File: docker-compose.yml
# Extension: .yml

version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cpp-mastery-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cpp_mastery_hub}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - cpp-mastery-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-cpp_mastery_hub}",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cpp-mastery-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - cpp-mastery-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MongoDB (for community features)
  mongodb:
    image: mongo:6.0
    container_name: cpp-mastery-mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-mongo123}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-cpp_mastery_community}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/database/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - cpp-mastery-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: production
    container_name: cpp-mastery-backend
    environment:
      NODE_ENV: production
      PORT: ${BACKEND_PORT:-8000}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/${POSTGRES_DB:-cpp_mastery_hub}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      MONGODB_URL: mongodb://${MONGO_USER:-admin}:${MONGO_PASSWORD:-mongo123}@mongodb:27017/${MONGO_DB:-cpp_mastery_community}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-refresh-secret-key-change-this-in-production}
      SESSION_SECRET: ${SESSION_SECRET:-your-session-secret-change-this-in-production}
      CPP_ENGINE_URL: http://cpp-engine:9000
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
      - backend_cache:/app/cache
    networks:
      - cpp-mastery-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # C++ Analysis Engine
  cpp-engine:
    build:
      context: .
      dockerfile: docker/cpp-engine/Dockerfile
      target: production
    container_name: cpp-mastery-cpp-engine
    environment:
      CPP_ENGINE_HOST: 0.0.0.0
      CPP_ENGINE_PORT: 9000
      CPP_ENGINE_LOG_LEVEL: ${CPP_ENGINE_LOG_LEVEL:-INFO}
      CPP_ENGINE_SANDBOX: true
      CPP_ENGINE_TIMEOUT: 30
    ports:
      - "${CPP_ENGINE_PORT:-9000}:9000"
    volumes:
      - cpp_engine_logs:/app/logs
      - cpp_engine_cache:/app/cache
      - cpp_engine_temp:/app/temp
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - cpp-mastery-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend (Next.js with Nginx)
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      target: production
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
        NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:8000}
        NEXT_PUBLIC_CPP_ENGINE_URL: ${NEXT_PUBLIC_CPP_ENGINE_URL:-http://localhost:9000}
        NEXT_PUBLIC_ANALYTICS_ENABLED: ${NEXT_PUBLIC_ANALYTICS_ENABLED:-false}
    container_name: cpp-mastery-frontend
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - cpp-mastery-network
    depends_on:
      - backend
      - cpp-engine
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Reverse Proxy (Production-ready Nginx)
  nginx:
    image: nginx:alpine
    container_name: cpp-mastery-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    networks:
      - cpp-mastery-network
    depends_on:
      - frontend
      - backend
      - cpp-engine
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Docker Networks
networks:
  cpp-mastery-network:
    driver: bridge
    name: cpp-mastery-network

# Docker Volumes
volumes:
  postgres_data:
    name: cpp-mastery-postgres-data
  redis_data:
    name: cpp-mastery-redis-data
  mongodb_data:
    name: cpp-mastery-mongodb-data
  backend_uploads:
    name: cpp-mastery-backend-uploads
  backend_logs:
    name: cpp-mastery-backend-logs
  backend_cache:
    name: cpp-mastery-backend-cache
  cpp_engine_logs:
    name: cpp-mastery-cpp-engine-logs
  cpp_engine_cache:
    name: cpp-mastery-cpp-engine-cache
  cpp_engine_temp:
    name: cpp-mastery-cpp-engine-temp
  nginx_logs:
    name: cpp-mastery-nginx-logs
  nginx_cache:
    name: cpp-mastery-nginx-cache
